def is_safe(board, row, col):
    # Check if there is a queen in the current column
    for i in range(row):
        if board[i] == col:
            return False
    
    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i] == j:
            return False
    
    # Check upper diagonal on right side
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i] == j:
            return False
    
    return True

def solve_n_queens_util(board, row):
    n = len(board)
    
    if row == n:
        # Base case: all queens are placed correctly
        return True
    
    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col  # Place queen
            
            if solve_n_queens_util(board, row + 1):
                return True
            
            # Backtrack
            board[row] = -1
    
    return False

def solve_n_queens():
    n = 8  # Size of the chessboard (8x8 for 8-queens)
    board = [-1] * n  # Initialize the board, -1 means no queen placed in that row
    
    if solve_n_queens_util(board, 0):
        # Print the board
        print_board(board)
    else:
        print("No solution exists")

def print_board(board):
    n = len(board)
    for i in range(n):
        for j in range(n):
            if board[i] == j:
                print("Q ", end="")
            else:
                print(". ", end="")
        print()
    print()

if __name__ == "__main__":
    solve_n_queens()

OUTPUT:
Solution found:
E = 5
O = 0
D = 7
N = 6
R = 8
M = 1
S = 9
Y = 2

