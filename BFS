from collections import deque

def bfs(graph, start):
    # Create a queue for BFS
    queue = deque([start])
    # Mark all the vertices as not visited
    visited = set([start])
    # List to store the order of traversal
    traversal_order = []

    while queue:
        # Dequeue a vertex from the queue
        vertex = queue.popleft()
        # Process the current node (vertex)
        traversal_order.append(vertex)

        # Get all adjacent vertices of the dequeued vertex
        # If an adjacent vertex has not been visited, mark it as visited and enqueue it
        for neighbor in graph[vertex]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

    return traversal_order

# Example usage
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F', 'G'],
    'D': ['B'],
    'E': ['B', 'H'],
    'F': ['C'],
    'G': ['C'],
    'H': ['E']
}

start_node = 'A'
print("BFS Traversal Order:", bfs(graph, start_node))


OUTPUT:
 
BFS Traversal Order: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
